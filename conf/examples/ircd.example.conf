/*
* Copy this file and place it in the 'conf' directory,
* and then rename the file to ircd.conf.
* Do the same for any files in the include directive.
* Default example files will be overriden on each update/git pull.
*
* IMPORTANT: Carefully go through all configuration files and change any default value you see!
*/

include "examples/modules.example.conf";
include "examples/operclass.example.conf";
include "examples/opers.example.conf";
include "examples/links.example.conf";
include "examples/dnsbl.example.conf";
include "examples/aliases.example.conf";
include "examples/exceptions.example.conf";
include "examples/spamfilter.example.conf";

me {
	server irc.someserver.net;
	name "Example Server";

	/*
	* Change this SID value to something else.
	* It has to start with a number, followed by 2 alphanumeric characters.
	* Nerd match: ^[0-9][A-Za-z0-9][A-Za-z0-9]$
	*/

	sid 001;
}

/*
* Here you can add administrative information about the server,
* such as (nick)names and contact information.
*/

admin {
	"Bob Smith";
	"bob1337";
	"email@example.org";
}

/*
* Default client class with limited sendq/recvq.
* A maximum of 1000 instances of this class is allowed.
*/

class clients {
	sendq 50000;
	recvq 5000;
	max 1000;
}

/*
* Example of a special class for IRC operators with increased sendq/recvq.
* For security purposes, limit the instance count to 5.
* You need to increase this if you choose to add more opers.
*/

class opers {
	sendq 500000;
	recvq 50000;
	max 5;
}

/*
* Servers require extra high sendq/recvq because they need to send and receive lots of data.
* Increase the `max` value if you need to link more servers.
*/

class servers {
	sendq 1000000;
	recvq 1000000;
	max 5;
}

/*
* Simple listen block that allows connections on port 6667 from all hosts. (both IPv4 and IPv6)
* This is not using TLS. To make it TLS-only, add an options { } block with `tls` option added.
* See below for an example using TLS, which is highly recommended. Please don't use non-TLS sockets.
*
* Note that if you want to bind IPv6 socket to IPv4 address only, you
* need to use syntax of IPv4 compatible address, e.g. ::ffff:0.0.0.0
* You may also use :: to listen everywhere or any IPv6 address you want to bind to.
*/

listen {
	ip *;
	// IPv4 only listening form.
	// ip ::ffff:0.0.0.0;
	port 6667;
}

/*
* This listen block only allows secure TLS connections on port 6697.
* It uses the key and cert specified below.
* You can change these values if you know what you are doing.
*/

listen {
	ip *;
	port 6697;
	options { tls; }

	tls-options {
		certificate-file "tls/server.cert.pem";
		key-file "tls/server.key.pem";
	}
}

/*
* Basic example of a listening port for servers only.
* You can also add `tls` option if both sides are configured correctly.
*/

listen {
	ip *;
	port 6900;
	options { servers; }
}

/*
* The allow clients from all hosts (*@*), put them in the `clients` class defined above,
* and limit connections to 5 per IP. You can increase this limit if needed.
*/

allow {
	mask *@*;
	class clients;
	maxperip 5;
}

settings {
	throttle 2:30;
	nickflood 2:30;
	regtimeout 10;
}

settings {
	/* SASL server required for m_sasl module. */
	sasl-server services.somesever.net;

	/*
	* If you are running Anope, set this value to the name of the services server.
	* Load the "unreal4" protocol module in Anope services.conf to make it work.
	*/

	services services.someserver.net;

	/*
	* Change this cloak key. Must be at least 64 characters long, contain at least 1 lowercase character,
	* 1 uppercase character, and 1 number. May not contain special characters.
	* When linking servers, make sure the cloak-key is the same on all servers.
	*/

	cloak-key "485052f6F59fA2f44060DdDd2632Dc41Eb6301B15a8EdC5aC391169541bD19b1";

	/* Whenever a new client connects, he will receive these user modes. */
	modes-on-connect "ix";

	/* Whenever a new channel is created, these modes will automatically be set. */
	modes-on-join "nt";

	/* Autojoin channels on connect. */
	// auto-join-on-connect "#main,#users";

	/*
	 * Whenever a new channel is created, this is default channel creator oper mode(s).
	 * Here, channel creator gets 'q' (owner) and 'o' (channel operator) modes
	 * because services (for example, Anope) complain about user not being an owner
	 * of channel just because he missed 'o' while having only 'q'.
	 *
	 * Empty or unset will leave user without any operator rights, and only IRC ops
	 * or services can grant operator mode to channel users.
	*/

	default-join-opmode "qo";

	/* Uncomment below line to enable static part messages. */
	// static-part "Leaving";

	/* Opers will automatically join this channel upon successful oper-up. */
	oper-auto-join "#Opers";

	/* Setting this to `no` disables hostname resolution by the server. */
	resolvehost no;

	/*
	 * Minimum nickname length. Useful to filter out all "imposting"
	 * nickname aliases such as NS, CS etc. representing NickServ, ChanServ.
	 * If user will attempt to use such nickname, it will not get an error
	 * but instead he will be silently renamed in a way (as per Python nick.center(3, '_')):
	 *
	 *	B  -> _B_
	 *	Bo -> _Bo
	 *
	 * The "centering" method deemed to be more userfriendly, since ending up with
	 * ugly looking nickname like "B____" for example is quite silly.
	 *
	 * IRC Operators with "immune:nick-minlength" permission are permitted
	 * to claim any nickname, bypassing restriction completely.
	 *
	 * This setting must be synchronized across whole network.
	*/

	nickminlen 3;

	/*
	 * Enable chanfix service. When channel will be created, the founder information
	 * will be recorded, and if founder suddenly disappears and then joins back later,
	 * he will automatically regain lost privilege which he got when creating the channel.
	 *
	 * Of course this depends on default-join-opmode above.
	 * It will be useless if default-join-opmode will be empty or unset.
	 *
	 * It it not recommended to have this on if services are present in the network,
	 * but will make life _alot_ easier if this IRCd will run without services.
	 */

	chanfix no;

	/* Trigger chanfix when joining lost channel? */
	// chanfix-on-join yes;

	/*
	 * If chanfix above is enabled, set types of founder information to be checked.
	 * Valid values: mask, certfp
	 * Mask will be recorded in full form, like "strlcat!rys@10.6.0.2"
	 * Obviously for certfp to work, you must enable TLS and client must provide
	 * his certificate for certfp property being set.
	 */

	// chanfix-types "mask,certfp"

	/* Passwords for the /die and /restart commands. Change these. */
	diepass "d13n0w";
	restartpass "r3st4rtn0w";

	/*
	* WebIRC settings. Required if loading the webirc module.
	* Change this password to something more secure.
	*/

	webirc {
		password "somePassword";

		/* IP whitelist is required. It will only allow WebIRC requests from the given IP addresses. */
		ip_whitelist {
			127.0.0.1;
		}
	}
}

/*
 * Q:line blocks usage of regex matched nicknames.
 * Below are examples of nicks reserved for services,
 * special client services like CHANFIX and OPME,
 * as well as banned anonymous nickname for chmode +U.
 * Please keep this list synchronized across servers.
 */

qlines {
	"^anonymous$";
	"^CHANFIX|OPME$";
	"^(Nick|Chan|Memo|Oper|Host|Bot|Stat|Spam|Root|Admin)Serv$|^Global|services$";
}

/*
* U:line servers have full control over the server.
* It is recommended to only use this for services.
* Never use this for normal linking.
*/

ulines {
	services.someserver.net;
}

/*
* Chathistory settings required by the m_history channelmode module.
* Configure how many lines will be saved per channel.
*/

chathistory {
	max-lines-unregistered 50;
	max-lines-registered 100;
}
